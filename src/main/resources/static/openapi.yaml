openapi: 3.0.3
info:
  title: Bank Cards System API
  description: |
    ## Система управления банковскими картами

    REST API для управления банковскими картами, пользователями и транзакциями.

    ### Аутентификация
    API использует JWT токены. Все защищенные endpoints требуют заголовок:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ### Как тестировать
    1. Получите токен через `/api/auth/login` с `admin`/`admin123`
    2. Используйте токен в заголовке Authorization
    3. Тестируйте API endpoints
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

security:
  - bearerAuth: [ ]

paths:
  /api/auth/login:
    post:
      tags: [ Authentication ]
      summary: Вход в систему
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: admin
              password: admin123
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /api/auth/validate:
    post:
      tags: [ Authentication ]
      summary: Проверка токена
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
      responses:
        '200':
          description: Токен валиден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResponse'

  /api/cards:
    get:
      tags: [ Cards ]
      summary: Получить список карт пользователя с пагинацией
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 0 }
        - name: size
          in: query
          schema: { type: integer, default: 20, maximum: 100 }
        - name: sortBy
          in: query
          schema: { type: string, default: createdAt }
        - name: sortDirection
          in: query
          schema: { type: string, enum: [ asc, desc ], default: desc }
      responses:
        '200':
          description: Список карт с пагинацией
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCardResponse'

  /api/cards/{id}:
    get:
      tags: [ Cards ]
      summary: Получить детали карты
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Детали карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

  /api/cards/{id}/request-block:
    post:
      tags: [ Cards ]
      summary: Запросить блокировку карты
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockRequest'
      responses:
        '200':
          description: Запрос создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockRequestResponse'


  /api/cards/balance:
    get:
      tags: [ Cards ]
      summary: Получить баланс всех карт пользователя
      responses:
        '200':
          description: Общий баланс карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBalanceResponse'

  /api/transactions:
    get:
      tags: [ Transactions ]
      summary: Получить список транзакций пользователя
      responses:
        '200':
          description: Список транзакций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'

    post:
      tags: [ Transactions ]
      summary: Создать транзакцию между картами
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
            example:
              fromCardNumber: "1234567890123456"
              toCardNumber: "9876543210987654"
              amount: 100.00
              description: "Перевод между картами"
      responses:
        '200':
          description: Транзакция создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'

  /api/transactions/card/{cardId}:
    get:
      tags: [ Transactions ]
      summary: Получить транзакции карты
      parameters:
        - name: cardId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Список транзакций карты
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'

  /api/transactions/{id}:
    get:
      tags: [ Transactions ]
      summary: Получить транзакцию по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Детали транзакции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'

  # Админские операции
  /api/admin/register:
    post:
      tags: [ Admin ]
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminAuthRegisterRequest'
      responses:
        '200':
          description: Пользователь зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /api/admin/users:
    get:
      tags: [ Admin ]
      summary: Получить список всех пользователей
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

    post:
      tags: [ Admin ]
      summary: Создать нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /api/admin/users/role/{role}:
    get:
      tags: [ Admin ]
      summary: Получить пользователей по роли
      parameters:
        - name: role
          in: path
          required: true
          schema: { type: string, enum: [ USER, ADMIN ] }
      responses:
        '200':
          description: Список пользователей по роли
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

  /api/admin/users/{id}:
    get:
      tags: [ Admin ]
      summary: Получить пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    put:
      tags: [ Admin ]
      summary: Обновить данные пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      tags: [ Admin ]
      summary: Удалить пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Пользователь удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'

  /api/admin/cards:
    get:
      tags: [ Admin ]
      summary: Получить все карты в системе
      responses:
        '200':
          description: Список всех карт
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'

    post:
      tags: [ Admin ]
      summary: Создать новую карту
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCardCreateRequest'
      responses:
        '200':
          description: Карта создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

  /api/admin/transactions:
    get:
      tags: [ Admin ]
      summary: Получить все транзакции в системе
      responses:
        '200':
          description: Список всех транзакций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'

  /api/admin/cards/{id}/block:
    put:
      tags: [ Admin ]
      summary: Заблокировать карту
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Карта заблокирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

  /api/admin/cards/{id}/unblock:
    put:
      tags: [ Admin ]
      summary: Разблокировать карту
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Карта разблокирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

  /api/admin/cards/{id}:
    put:
      tags: [ Admin ]
      summary: Обновить карту
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCardUpdateRequest'
      responses:
        '200':
          description: Карта обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

    delete:
      tags: [ Admin ]
      summary: Удалить карту
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Карта удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'

  /api/admin/card-block-requests:
    get:
      tags: [ Admin ]
      summary: Получить все запросы на блокировку карт
      responses:
        '200':
          description: Список запросов на блокировку
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockRequestResponse'

  /api/admin/card-block-requests/status/{status}:
    get:
      tags: [ Admin ]
      summary: Получить запросы на блокировку по статусу
      parameters:
        - name: status
          in: path
          required: true
          schema: { type: string, enum: [ PENDING, APPROVED, REJECTED ] }
      responses:
        '200':
          description: Список запросов по статусу
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockRequestResponse'

  /api/admin/card-block-requests/{id}/approve:
    put:
      tags: [ Admin ]
      summary: Одобрить запрос на блокировку карты
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Запрос одобрен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockRequestResponse'

  /api/admin/card-block-requests/{id}/reject:
    put:
      tags: [ Admin ]
      summary: Отклонить запрос на блокировку карты
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Запрос отклонен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockRequestResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен через /api/auth/login

  schemas:
    LoginRequest:
      type: object
      required: [ username, password ]
      properties:
        username: { type: string, example: admin }
        password: { type: string, format: password, example: admin123 }

    TransactionCreateRequest:
      type: object
      required: [ fromCardNumber, toCardNumber, amount ]
      properties:
        fromCardNumber: { type: string, example: "1234567890123456" }
        toCardNumber: { type: string, example: "9876543210987654" }
        amount: { type: number, format: decimal, minimum: 0.01, example: 100.00 }
        description: { type: string, example: "Перевод между картами" }


    AuthTokenRequest:
      type: object
      required: [ token ]
      properties:
        token: { type: string, description: "JWT токен для проверки" }

    AdminAuthRegisterRequest:
      type: object
      required: [ username, password ]
      properties:
        username: { type: string, minLength: 3, maxLength: 50, example: "john_doe" }
        password: { type: string, format: password, minLength: 6, example: "password123" }

    AdminCardCreateRequest:
      type: object
      required: [ userId, cardNumber, owner, expiryDate ]
      properties:
        userId: { type: integer, format: int64 }
        cardNumber: { type: string, example: "1234567890123456" }
        owner: { type: string, minLength: 2, maxLength: 100, example: "John Doe" }
        expiryDate: { type: string, example: "2025-12-31" }
        balance: { type: number, format: decimal, minimum: 0, default: 0.00, example: 1000.00 }

    AdminCardUpdateRequest:
      type: object
      required: [ owner, expiryDate ]
      properties:
        owner: { type: string, minLength: 2, maxLength: 100, example: "John Doe" }
        expiryDate: { type: string, example: "2025-12-31" }
        status: { type: string, enum: [ ACTIVE, BLOCKED, EXPIRED ] }

    BlockRequest:
      type: object
      required: [ reason ]
      properties:
        reason: { type: string, example: "Потеряна карта" }

    UserCreateRequest:
      type: object
      required: [ username, password, email ]
      properties:
        username: { type: string, minLength: 3, maxLength: 50, example: "john_doe" }
        password: { type: string, format: password, minLength: 6, example: "password123" }
        email: { type: string, format: email, example: "john@example.com" }
        role: { type: string, enum: [ USER, ADMIN ], default: USER }

    UserUpdateRequest:
      type: object
      properties:
        username: { type: string, minLength: 3, maxLength: 50, example: "john_doe" }
        password: { type: string, format: password, minLength: 6, example: "newpassword123" }
        role: { type: string, enum: [ USER, ADMIN ] }

    LoginResponse:
      type: object
      properties:
        token: { type: string, description: "JWT токен" }
        message: { type: string, example: "Login successful" }

    CardResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        cardNumber: { type: string, example: "**** **** **** 1234" }
        cardholderName: { type: string, example: "John Doe" }
        expiryDate: { type: string, example: "2025-12-31" }
        status: { type: string, enum: [ ACTIVE, BLOCKED, EXPIRED ] }
        balance: { type: number, format: decimal, example: 1000.00 }
        createdAt: { type: string, format: date-time }

    PaginatedCardResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
        page: { type: integer }
        size: { type: integer }
        totalElements: { type: integer }
        totalPages: { type: integer }
        first: { type: boolean }
        last: { type: boolean }
        hasNext: { type: boolean }
        hasPrevious: { type: boolean }

    TransactionResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        fromCardId: { type: integer, format: int64 }
        toCardId: { type: integer, format: int64 }
        amount: { type: number, format: decimal, example: 100.00 }
        description: { type: string }
        status: { type: string, enum: [ PENDING, COMPLETED, FAILED ] }
        createdAt: { type: string, format: date-time }

    TokenValidationResponse:
      type: object
      properties:
        valid: { type: boolean }
        message: { type: string, example: "Token is valid" }

    BlockRequestResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        cardId: { type: integer, format: int64 }
        reason: { type: string }
        status: { type: string, enum: [ PENDING, APPROVED, REJECTED ] }
        requestedAt: { type: string, format: date-time }

    UserResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        username: { type: string, example: "john_doe" }
        email: { type: string, format: email, example: "john@example.com" }
        role: { type: string, enum: [ USER, ADMIN ] }
        createdAt: { type: string, format: date-time }

    UserBalanceResponse:
      type: object
      properties:
        totalBalance: { type: number, format: decimal, example: 2500.00 }
        cardBalances:
          type: array
          items:
            type: object
            properties:
              cardId: { type: integer, format: int64 }
              cardNumber: { type: string, example: "**** **** **** 1234" }
              balance: { type: number, format: decimal, example: 1000.00 }
              status: { type: string, enum: [ ACTIVE, BLOCKED, EXPIRED ] }

    GenericSuccessResponse:
      type: object
      properties:
        message: { type: string, example: "Operation successful" }

    ErrorResponse:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        status: { type: integer }
        error: { type: string }
        message: { type: string }
        path: { type: string }

tags:
  - name: Authentication
    description: Аутентификация
  - name: Cards
    description: Управление картами
  - name: Transactions
    description: Транзакции
  - name: Admin
    description: Административные операции
